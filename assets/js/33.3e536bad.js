(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{414:function(e,t,r){"use strict";r.r(t);var n=r(11),o=Object(n.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"内容协商"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内容协商"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://www.django-rest-framework.org/api-guide/content-negotiation/#content-negotiation",target:"_blank",rel:"noopener noreferrer"}},[e._v("内容协商"),r("OutboundLink")],1)]),e._v(" "),r("blockquote",[r("p",[e._v("HTTP提供了几种用于“内容协商”的机制-当存在多个表示形式时，为给定响应选择最佳表示形式的过程。")]),e._v(" "),r("p",[e._v("— Fielding等人的"),r("a",{attrs:{href:"https://www.w3.org/Protocols/rfc2616/rfc2616-sec12.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("RFC 2616"),r("OutboundLink")],1),e._v("。")])]),e._v(" "),r("p",[e._v("内容协商是根据客户端或服务器的偏好选择多个可能的表示形式之一返回客户端的过程。")]),e._v(" "),r("h2",{attrs:{id:"确定可接受的渲染器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#确定可接受的渲染器"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://www.django-rest-framework.org/api-guide/content-negotiation/#determining-the-accepted-renderer",target:"_blank",rel:"noopener noreferrer"}},[e._v("确定可接受的渲染器"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("REST框架使用简单的内容协商样式，根据可用的渲染器，每个渲染器的优先级以及客户端的"),r("code",[e._v("Accept:")]),e._v("标头，确定应将哪种媒体类型返回给客户端。使用的样式部分是客户端驱动的，部分是服务器驱动的。")]),e._v(" "),r("ol",[r("li",[e._v("较具体的媒体类型优先于较不具体的媒体类型。")]),e._v(" "),r("li",[e._v("如果多种媒体类型具有相同的特异性，则根据为给定视图配置的渲染器的顺序来优先考虑。")])]),e._v(" "),r("p",[e._v("例如，给定以下"),r("code",[e._v("Accept")]),e._v("标头：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("application/json; indent=4, application/json, application/yaml, text/html, */*\n")])])]),r("p",[e._v("每种给定媒体类型的优先级为：")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("application/json; indent=4")])]),e._v(" "),r("li",[r("code",[e._v("application/json")]),e._v("，"),r("code",[e._v("application/yaml")]),e._v("和"),r("code",[e._v("text/html")])]),e._v(" "),r("li",[r("code",[e._v("*/*")])])]),e._v(" "),r("p",[e._v("如果请求的观点仅渲染器配置"),r("code",[e._v("YAML")]),e._v("和"),r("code",[e._v("HTML")]),e._v("，然后休息框架会选择哪个渲染器，在首批上市"),r("code",[e._v("renderer_classes")]),e._v("名单或"),r("code",[e._v("DEFAULT_RENDERER_CLASSES")]),e._v("设置。")]),e._v(" "),r("p",[e._v("有关"),r("code",[e._v("HTTP Accept")]),e._v("标题的更多信息，请参见"),r("a",{attrs:{href:"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("RFC 2616。"),r("OutboundLink")],1)]),e._v(" "),r("hr"),e._v(" "),r("p",[r("strong",[e._v("注意")]),e._v("：REST框架在确定首选项时不会考虑“ q”值。使用“ q”值会对缓存产生负面影响，并且在作者看来，它们是内容协商中不必要且过于复杂的方法。")]),e._v(" "),r("p",[e._v("这是一种有效的方法，因为HTTP规范故意未指定服务器应如何权衡基于服务器的首选项和基于客户端的首选项。")]),e._v(" "),r("hr"),e._v(" "),r("h1",{attrs:{id:"定制内容谈判"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#定制内容谈判"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://www.django-rest-framework.org/api-guide/content-negotiation/#custom-content-negotiation",target:"_blank",rel:"noopener noreferrer"}},[e._v("定制内容谈判"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("您不太可能希望为REST框架提供自定义内容协商方案，但是可以在需要时这样做。要实现自定义内容协商方案，请重写"),r("code",[e._v("BaseContentNegotiation")]),e._v("。")]),e._v(" "),r("p",[e._v("REST框架的内容协商类可以处理对请求的适当解析器和对响应的适当渲染器的选择，因此您应同时实现"),r("code",[e._v(".select_parser(request, parsers)")]),e._v("和"),r("code",[e._v(".select_renderer(request, renderers, format_suffix)")]),e._v("方法。")]),e._v(" "),r("p",[e._v("该"),r("code",[e._v("select_parser()")]),e._v("方法应该从可用的解析器列表中返回一个解析器实例，或者"),r("code",[e._v("None")]),e._v("如果没有解析器可以处理传入的请求。")]),e._v(" "),r("p",[e._v("该"),r("code",[e._v("select_renderer()")]),e._v("方法应返回一个二元组（渲染器实例，媒体类型），或引发"),r("code",[e._v("NotAcceptable")]),e._v("异常。")]),e._v(" "),r("h2",{attrs:{id:"例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#例"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://www.django-rest-framework.org/api-guide/content-negotiation/#example",target:"_blank",rel:"noopener noreferrer"}},[e._v("例"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("以下是一个自定义内容协商类，在选择适当的解析器或渲染器时，它将忽略客户端请求。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('from rest_framework.negotiation import BaseContentNegotiation\n\nclass IgnoreClientContentNegotiation(BaseContentNegotiation):\n    def select_parser(self, request, parsers):\n        """\n        Select the first parser in the `.parser_classes` list.\n        """\n        return parsers[0]\n\n    def select_renderer(self, request, renderers, format_suffix):\n        """\n        Select the first renderer in the `.renderer_classes` list.\n        """\n        return (renderers[0], renderers[0].media_type)\n')])])]),r("h2",{attrs:{id:"设置内容协商"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设置内容协商"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://www.django-rest-framework.org/api-guide/content-negotiation/#setting-the-content-negotiation",target:"_blank",rel:"noopener noreferrer"}},[e._v("设置内容协商"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("可以使用该"),r("code",[e._v("DEFAULT_CONTENT_NEGOTIATION_CLASS")]),e._v("设置全局设置默认内容协商类。例如，以下设置将使用我们的示例"),r("code",[e._v("IgnoreClientContentNegotiation")]),e._v("类。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("REST_FRAMEWORK = {\n    'DEFAULT_CONTENT_NEGOTIATION_CLASS': 'myapp.negotiation.IgnoreClientContentNegotiation',\n}\n")])])]),r("p",[e._v("您还可以使用"),r("code",[e._v("APIView")]),e._v("基于类的视图来设置用于单个视图或视图集的内容协商。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('from myapp.negotiation import IgnoreClientContentNegotiation\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass NoNegotiationView(APIView):\n    """\n    An example view that does not perform content negotiation.\n    """\n    content_negotiation_class = IgnoreClientContentNegotiation\n\n    def get(self, request, format=None):\n        return Response({\n            \'accepted media type\': request.accepted_renderer.media_type\n        })\n')])])])])}),[],!1,null,null,null);t.default=o.exports}}]);