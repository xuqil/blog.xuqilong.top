(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{417:function(e,a,t){"use strict";t.r(a);var r=t(11),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"架构图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构图"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://www.django-rest-framework.org/api-guide/schemas/#schema",target:"_blank",rel:"noopener noreferrer"}},[e._v("架构图"),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[t("p",[e._v("机器可读的[模式]描述可以通过API使用哪些资源，它们的URL，它们的表示方式以及它们支持的操作。")]),e._v(" "),t("p",[e._v("— Heroku，[Heroku平台API的JSON架构] [cite]")])]),e._v(" "),t("p",[e._v("API模式是一个有用的工具，可用于各种用例，包括生成参考文档或驱动可与API交互的动态客户端库。")]),e._v(" "),t("p",[e._v("Django REST Framework提供了对自动生成 "),t("a",{attrs:{href:"https://github.com/OAI/OpenAPI-Specification",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenAPI"),t("OutboundLink")],1),e._v("模式的支持。")]),e._v(" "),t("h2",{attrs:{id:"生成openapi架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成openapi架构"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://www.django-rest-framework.org/api-guide/schemas/#generating-an-openapi-schema",target:"_blank",rel:"noopener noreferrer"}},[e._v("生成OpenAPI架构"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"安装-pyyaml"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装-pyyaml"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://www.django-rest-framework.org/api-guide/schemas/#install-pyyaml",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装 "),t("code",[e._v("pyyaml")]),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("您需要安装"),t("code",[e._v("pyyaml")]),e._v("，以便可以将生成的架构呈现为常用的基于YAML的OpenAPI格式。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("pip install pyyaml\n")])])]),t("h3",{attrs:{id:"使用generateschema管理命令生成静态模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用generateschema管理命令生成静态模式"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://www.django-rest-framework.org/api-guide/schemas/#generating-a-static-schema-with-the-generateschema-management-command",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用"),t("code",[e._v("generateschema")]),e._v("管理命令生成静态模式"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("如果您的架构是静态的，则可以使用"),t("code",[e._v("generateschema")]),e._v("管理命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("./manage.py generateschema > openapi-schema.yml\n")])])]),t("p",[e._v("以这种方式生成模式后，您可以使用模式生成器无法自动推断的任何其他信息对其进行注释。")]),e._v(" "),t("p",[e._v("您可能需要将API模式检查到版本控制中并在每个新发行版中进行更新，或者从站点的静态媒体提供API模式。")]),e._v(" "),t("h3",{attrs:{id:"使用生成动态模式-schemaview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用生成动态模式-schemaview"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://www.django-rest-framework.org/api-guide/schemas/#generating-a-dynamic-schema-with-schemaview",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用生成动态模式 "),t("code",[e._v("SchemaView")]),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("如果您需要动态架构，例如，由于外键选择取决于数据库值，则可以路由"),t("code",[e._v("SchemaView")]),e._v("将根据需要生成和提供架构的a。")]),e._v(" "),t("p",[e._v("要路由"),t("code",[e._v("SchemaView")]),e._v("，请使用"),t("code",[e._v("get_schema_view()")]),e._v("帮助器。")]),e._v(" "),t("p",[e._v("在"),t("code",[e._v("urls.py")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('from rest_framework.schemas import get_schema_view\n\nurlpatterns = [\n    # ...\n    # Use the `get_schema_view()` helper to add a `SchemaView` to project URLs.\n    #   * `title` and `description` parameters are passed to `SchemaGenerator`.\n    #   * Provide view name for use with `reverse()`.\n    path(\'openapi\', get_schema_view(\n        title="Your Project",\n        description="API for all things …",\n        version="1.0.0"\n    ), name=\'openapi-schema\'),\n    # ...\n]\n')])])]),t("h4",{attrs:{id:"get-schema-view"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-schema-view"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://www.django-rest-framework.org/api-guide/schemas/#get_schema_view",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("get_schema_view()")]),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("该"),t("code",[e._v("get_schema_view()")]),e._v("助手采用以下关键字参数：")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("title")]),e._v("：可用于为模式定义提供描述性标题。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("description")]),e._v("：较长的描述性文字。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("version")]),e._v("：API的版本。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("url")]),e._v("：可用于传递模式的规范基础URL。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("schema_view = get_schema_view(\n    title='Server Monitoring API',\n    url='https://www.example.org/api/'\n)\n")])])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("urlconf")]),e._v("：一个字符串，表示要为其生成API架构的URL conf的导入路径。默认为Django "),t("code",[e._v("ROOT_URLCONF")]),e._v("设置的值 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("schema_view = get_schema_view(\n    title='Server Monitoring API',\n    url='https://www.example.org/api/',\n    urlconf='myproject.urls'\n)\n")])])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("patterns")]),e._v("：限制模式自检的网址格式列表。如果只希望"),t("code",[e._v("myproject.api")]),e._v("在架构中公开网址：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("schema_url_patterns = [\n    url(r'^api/', include('myproject.api.urls')),\n]\n\nschema_view = get_schema_view(\n    title='Server Monitoring API',\n    url='https://www.example.org/api/',\n    patterns=schema_url_patterns,\n)\n")])])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("generator_class")]),e._v("：可用于指定"),t("code",[e._v("SchemaGenerator")]),e._v("要传递给的子类"),t("code",[e._v("SchemaView")]),e._v("。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("authentication_classes")]),e._v("：可用于指定将应用于架构端点的身份验证类的列表。默认为 "),t("code",[e._v("settings.DEFAULT_AUTHENTICATION_CLASSES")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("permission_classes")]),e._v("：可用于指定将应用于架构端点的权限类别列表。默认为 "),t("code",[e._v("settings.DEFAULT_PERMISSION_CLASSES")]),e._v("。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("renderer_classes")]),e._v("：可用于传递可用于渲染API根端点的渲染器类集。")])])]),e._v(" "),t("h2",{attrs:{id:"自定义架构生成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义架构生成"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://www.django-rest-framework.org/api-guide/schemas/#customizing-schema-generation",target:"_blank",rel:"noopener noreferrer"}},[e._v("自定义架构生成"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("您可以在整个架构级别或每个视图的基础上自定义架构生成。")]),e._v(" "),t("h3",{attrs:{id:"架构级别自定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构级别自定义"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://www.django-rest-framework.org/api-guide/schemas/#schema-level-customization",target:"_blank",rel:"noopener noreferrer"}},[e._v("架构级别自定义"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("为了自定义顶级架构子集， "),t("code",[e._v("rest_framework.schemas.openapi.SchemaGenerator")]),e._v("并将其作为"),t("code",[e._v("generateschema")]),e._v("命令或"),t("code",[e._v("get_schema_view()")]),e._v("辅助函数的参数提供。")]),e._v(" "),t("h4",{attrs:{id:"模式生成器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模式生成器"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://www.django-rest-framework.org/api-guide/schemas/#schemagenerator",target:"_blank",rel:"noopener noreferrer"}},[e._v("模式生成器"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("一个类，该类遍历路由的URL模式的列表，为每个视图请求模式并整理生成的OpenAPI模式。")]),e._v(" "),t("p",[e._v("通常，您将"),t("code",[e._v("SchemaGenerator")]),e._v("使用"),t("code",[e._v("title")]),e._v("参数实例化，如下所示：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("generator = SchemaGenerator(title='Stock Prices API')\n")])])]),t("p",[e._v("参数：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("title")]),e._v(" "),t("strong",[e._v("required")]),e._v("：API的名称。")]),e._v(" "),t("li",[t("code",[e._v("description")]),e._v("：较长的描述性文字。")]),e._v(" "),t("li",[t("code",[e._v("version")]),e._v("：API的版本。默认为"),t("code",[e._v("0.1.0")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("url")]),e._v("：API模式的根URL。除非架构包含在路径前缀下，否则不需要此选项。")]),e._v(" "),t("li",[t("code",[e._v("patterns")]),e._v("：生成架构时要检查的URL列表。默认为项目的URL conf。")]),e._v(" "),t("li",[t("code",[e._v("urlconf")]),e._v("：生成架构时要使用的URL conf模块名称。默认为"),t("code",[e._v("settings.ROOT_URLCONF")]),e._v("。")])]),e._v(" "),t("h5",{attrs:{id:"get-schema-自己-要求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-schema-自己-要求"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://www.django-rest-framework.org/api-guide/schemas/#get_schemaself-request",target:"_blank",rel:"noopener noreferrer"}},[e._v("get_schema（自己，要求）"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("返回表示OpenAPI模式的字典：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("generator = SchemaGenerator(title='Stock Prices API')\nschema = generator.get_schema()\n")])])]),t("p",[e._v("该"),t("code",[e._v("request")]),e._v("参数是可选的，如果要对生成的模式生成应用每用户权限，则可以使用该参数。")]),e._v(" "),t("p",[e._v("如果要自定义生成的字典（例如添加自定义"),t("a",{attrs:{href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#specification-extensions",target:"_blank",rel:"noopener noreferrer"}},[e._v("规范扩展）"),t("OutboundLink")],1),e._v("，则可以覆盖该方法 。")]),e._v(" "),t("h3",{attrs:{id:"按视图自定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#按视图自定义"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://www.django-rest-framework.org/api-guide/schemas/#per-view-customization",target:"_blank",rel:"noopener noreferrer"}},[e._v("按视图自定义"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("默认情况下，视图自省由"),t("code",[e._v("AutoSchema")]),e._v("可通过"),t("code",[e._v("schema")]),e._v("on 的属性访问的实例执行"),t("code",[e._v("APIView")]),e._v("。这为视图，请求方法和路径提供了适当的"),t("a",{attrs:{href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#operationObject",target:"_blank",rel:"noopener noreferrer"}},[e._v("Open API操作对象"),t("OutboundLink")],1),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("auto_schema = view.schema\noperation = auto_schema.get_operation(...)\n")])])]),t("p",[e._v("在编译架构时，"),t("code",[e._v("SchemaGenerator")]),e._v("调用"),t("code",[e._v("view.schema.get_operation()")]),e._v(" 每个视图，允许的方法和路径。")]),e._v(" "),t("hr"),e._v(" "),t("p",[t("strong",[e._v("注意")]),e._v("：对于基本"),t("code",[e._v("APIView")]),e._v("子类，默认自省本质上仅限于URL kwarg路径参数。对于"),t("code",[e._v("GenericAPIView")]),e._v(" 包括所有提供的基于类的视图的子类，"),t("code",[e._v("AutoSchema")]),e._v("将尝试内省序列化器，分页和过滤器字段，并提供更丰富的路径字段描述。（这里的关键是挂钩的相关 "),t("code",[e._v("GenericAPIView")]),e._v("属性和方法："),t("code",[e._v("get_serializer")]),e._v("，"),t("code",[e._v("pagination_class")]),e._v("， "),t("code",[e._v("filter_backends")]),e._v("等。）")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("为了自定义操作生成，您应该提供一个"),t("code",[e._v("AutoSchema")]),e._v("子类，"),t("code",[e._v("get_operation()")]),e._v("根据需要进行覆盖：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    from rest_framework.views import APIView\n    from rest_framework.schemas.openapi import AutoSchema\n\n    class CustomSchema(AutoSchema):\n        def get_operation(...):\n            # Implement custom introspection here (or in other sub-methods)\n\n    class CustomView(APIView):\n        """APIView subclass with custom schema introspection."""\n        schema = CustomSchema()\n')])])]),t("p",[e._v("这样可以完全控制视图自省。")]),e._v(" "),t("p",[e._v("您可以通过设置"),t("code",[e._v("schema")]),e._v("为来禁用视图的架构生成"),t("code",[e._v("None")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class CustomView(APIView):\n    ...\n    schema = None  # Will not appear in schema\n")])])]),t("p",[e._v("这也适用于的额外操作"),t("code",[e._v("ViewSet")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class CustomViewSet(viewsets.ModelViewSet):\n\n    @action(detail=True, schema=None)\n    def extra_action(self, request, pk=None):\n        ...\n")])])]),t("p",[e._v("如果希望提供"),t("code",[e._v("AutoSchema")]),e._v("在整个项目中使用的基本子类，则可以进行"),t("code",[e._v("settings.DEFAULT_SCHEMA_CLASS")]),e._v(" 适当调整。")])])}),[],!1,null,null,null);a.default=s.exports}}]);